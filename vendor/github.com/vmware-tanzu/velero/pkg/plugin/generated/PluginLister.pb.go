// Code generated by protoc-gen-go. DO NOT EDIT.
// source: PluginLister.proto

package generated

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PluginIdentifier struct {
	Command string `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
	Kind    string `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *PluginIdentifier) Reset()                    { *m = PluginIdentifier{} }
func (m *PluginIdentifier) String() string            { return proto.CompactTextString(m) }
func (*PluginIdentifier) ProtoMessage()               {}
func (*PluginIdentifier) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *PluginIdentifier) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *PluginIdentifier) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *PluginIdentifier) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListPluginsResponse struct {
	Plugins []*PluginIdentifier `protobuf:"bytes,1,rep,name=plugins" json:"plugins,omitempty"`
}

func (m *ListPluginsResponse) Reset()                    { *m = ListPluginsResponse{} }
func (m *ListPluginsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListPluginsResponse) ProtoMessage()               {}
func (*ListPluginsResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *ListPluginsResponse) GetPlugins() []*PluginIdentifier {
	if m != nil {
		return m.Plugins
	}
	return nil
}

func init() {
	proto.RegisterType((*PluginIdentifier)(nil), "generated.PluginIdentifier")
	proto.RegisterType((*ListPluginsResponse)(nil), "generated.ListPluginsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PluginLister service

type PluginListerClient interface {
	ListPlugins(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListPluginsResponse, error)
}

type pluginListerClient struct {
	cc *grpc.ClientConn
}

func NewPluginListerClient(cc *grpc.ClientConn) PluginListerClient {
	return &pluginListerClient{cc}
}

func (c *pluginListerClient) ListPlugins(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListPluginsResponse, error) {
	out := new(ListPluginsResponse)
	err := grpc.Invoke(ctx, "/generated.PluginLister/ListPlugins", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PluginLister service

type PluginListerServer interface {
	ListPlugins(context.Context, *Empty) (*ListPluginsResponse, error)
}

func RegisterPluginListerServer(s *grpc.Server, srv PluginListerServer) {
	s.RegisterService(&_PluginLister_serviceDesc, srv)
}

func _PluginLister_ListPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginListerServer).ListPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.PluginLister/ListPlugins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginListerServer).ListPlugins(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PluginLister_serviceDesc = grpc.ServiceDesc{
	ServiceName: "generated.PluginLister",
	HandlerType: (*PluginListerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPlugins",
			Handler:    _PluginLister_ListPlugins_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "PluginLister.proto",
}

func init() { proto.RegisterFile("PluginLister.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 201 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x0a, 0xc8, 0x29, 0x4d,
	0xcf, 0xcc, 0xf3, 0xc9, 0x2c, 0x2e, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x4c, 0x4f, 0xcd, 0x4b, 0x2d, 0x4a, 0x2c, 0x49, 0x4d, 0x91, 0xe2, 0x09, 0xce, 0x48, 0x2c, 0x4a,
	0x4d, 0x81, 0x48, 0x28, 0x85, 0x70, 0x09, 0x40, 0x94, 0x7b, 0xa6, 0xa4, 0xe6, 0x95, 0x64, 0xa6,
	0x65, 0xa6, 0x16, 0x09, 0x49, 0x70, 0xb1, 0x27, 0xe7, 0xe7, 0xe6, 0x26, 0xe6, 0xa5, 0x48, 0x30,
	0x2a, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xb8, 0x42, 0x42, 0x5c, 0x2c, 0xd9, 0x99, 0x79, 0x29, 0x12,
	0x4c, 0x60, 0x61, 0x30, 0x1b, 0x24, 0x96, 0x97, 0x98, 0x9b, 0x2a, 0xc1, 0x0c, 0x11, 0x03, 0xb1,
	0x95, 0x7c, 0xb8, 0x84, 0x41, 0xd6, 0x43, 0x4c, 0x2e, 0x0e, 0x4a, 0x2d, 0x2e, 0xc8, 0xcf, 0x2b,
	0x4e, 0x15, 0x32, 0xe5, 0x62, 0x2f, 0x80, 0x08, 0x49, 0x30, 0x2a, 0x30, 0x6b, 0x70, 0x1b, 0x49,
	0xeb, 0xc1, 0xdd, 0xa5, 0x87, 0xee, 0x8c, 0x20, 0x98, 0x5a, 0x23, 0x7f, 0x2e, 0x1e, 0x64, 0x2f,
	0x09, 0xd9, 0x73, 0x71, 0x23, 0x99, 0x2e, 0x24, 0x80, 0x64, 0x88, 0x6b, 0x6e, 0x41, 0x49, 0xa5,
	0x94, 0x1c, 0x92, 0x08, 0x16, 0x77, 0x24, 0xb1, 0x81, 0xfd, 0x6e, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0x0e, 0xb5, 0xe4, 0x0c, 0x2a, 0x01, 0x00, 0x00,
}
