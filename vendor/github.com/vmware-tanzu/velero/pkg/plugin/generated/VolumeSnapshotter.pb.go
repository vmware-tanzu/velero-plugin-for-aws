// Code generated by protoc-gen-go. DO NOT EDIT.
// source: VolumeSnapshotter.proto

package generated

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateVolumeRequest struct {
	Plugin     string `protobuf:"bytes,1,opt,name=plugin" json:"plugin,omitempty"`
	SnapshotID string `protobuf:"bytes,2,opt,name=snapshotID" json:"snapshotID,omitempty"`
	VolumeType string `protobuf:"bytes,3,opt,name=volumeType" json:"volumeType,omitempty"`
	VolumeAZ   string `protobuf:"bytes,4,opt,name=volumeAZ" json:"volumeAZ,omitempty"`
	Iops       int64  `protobuf:"varint,5,opt,name=iops" json:"iops,omitempty"`
}

func (m *CreateVolumeRequest) Reset()                    { *m = CreateVolumeRequest{} }
func (m *CreateVolumeRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateVolumeRequest) ProtoMessage()               {}
func (*CreateVolumeRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *CreateVolumeRequest) GetPlugin() string {
	if m != nil {
		return m.Plugin
	}
	return ""
}

func (m *CreateVolumeRequest) GetSnapshotID() string {
	if m != nil {
		return m.SnapshotID
	}
	return ""
}

func (m *CreateVolumeRequest) GetVolumeType() string {
	if m != nil {
		return m.VolumeType
	}
	return ""
}

func (m *CreateVolumeRequest) GetVolumeAZ() string {
	if m != nil {
		return m.VolumeAZ
	}
	return ""
}

func (m *CreateVolumeRequest) GetIops() int64 {
	if m != nil {
		return m.Iops
	}
	return 0
}

type CreateVolumeResponse struct {
	VolumeID string `protobuf:"bytes,1,opt,name=volumeID" json:"volumeID,omitempty"`
}

func (m *CreateVolumeResponse) Reset()                    { *m = CreateVolumeResponse{} }
func (m *CreateVolumeResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateVolumeResponse) ProtoMessage()               {}
func (*CreateVolumeResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *CreateVolumeResponse) GetVolumeID() string {
	if m != nil {
		return m.VolumeID
	}
	return ""
}

type GetVolumeInfoRequest struct {
	Plugin   string `protobuf:"bytes,1,opt,name=plugin" json:"plugin,omitempty"`
	VolumeID string `protobuf:"bytes,2,opt,name=volumeID" json:"volumeID,omitempty"`
	VolumeAZ string `protobuf:"bytes,3,opt,name=volumeAZ" json:"volumeAZ,omitempty"`
}

func (m *GetVolumeInfoRequest) Reset()                    { *m = GetVolumeInfoRequest{} }
func (m *GetVolumeInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetVolumeInfoRequest) ProtoMessage()               {}
func (*GetVolumeInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *GetVolumeInfoRequest) GetPlugin() string {
	if m != nil {
		return m.Plugin
	}
	return ""
}

func (m *GetVolumeInfoRequest) GetVolumeID() string {
	if m != nil {
		return m.VolumeID
	}
	return ""
}

func (m *GetVolumeInfoRequest) GetVolumeAZ() string {
	if m != nil {
		return m.VolumeAZ
	}
	return ""
}

type GetVolumeInfoResponse struct {
	VolumeType string `protobuf:"bytes,1,opt,name=volumeType" json:"volumeType,omitempty"`
	Iops       int64  `protobuf:"varint,2,opt,name=iops" json:"iops,omitempty"`
}

func (m *GetVolumeInfoResponse) Reset()                    { *m = GetVolumeInfoResponse{} }
func (m *GetVolumeInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*GetVolumeInfoResponse) ProtoMessage()               {}
func (*GetVolumeInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *GetVolumeInfoResponse) GetVolumeType() string {
	if m != nil {
		return m.VolumeType
	}
	return ""
}

func (m *GetVolumeInfoResponse) GetIops() int64 {
	if m != nil {
		return m.Iops
	}
	return 0
}

type CreateSnapshotRequest struct {
	Plugin   string            `protobuf:"bytes,1,opt,name=plugin" json:"plugin,omitempty"`
	VolumeID string            `protobuf:"bytes,2,opt,name=volumeID" json:"volumeID,omitempty"`
	VolumeAZ string            `protobuf:"bytes,3,opt,name=volumeAZ" json:"volumeAZ,omitempty"`
	Tags     map[string]string `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *CreateSnapshotRequest) Reset()                    { *m = CreateSnapshotRequest{} }
func (m *CreateSnapshotRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateSnapshotRequest) ProtoMessage()               {}
func (*CreateSnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *CreateSnapshotRequest) GetPlugin() string {
	if m != nil {
		return m.Plugin
	}
	return ""
}

func (m *CreateSnapshotRequest) GetVolumeID() string {
	if m != nil {
		return m.VolumeID
	}
	return ""
}

func (m *CreateSnapshotRequest) GetVolumeAZ() string {
	if m != nil {
		return m.VolumeAZ
	}
	return ""
}

func (m *CreateSnapshotRequest) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type CreateSnapshotResponse struct {
	SnapshotID string `protobuf:"bytes,1,opt,name=snapshotID" json:"snapshotID,omitempty"`
}

func (m *CreateSnapshotResponse) Reset()                    { *m = CreateSnapshotResponse{} }
func (m *CreateSnapshotResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateSnapshotResponse) ProtoMessage()               {}
func (*CreateSnapshotResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *CreateSnapshotResponse) GetSnapshotID() string {
	if m != nil {
		return m.SnapshotID
	}
	return ""
}

type DeleteSnapshotRequest struct {
	Plugin     string `protobuf:"bytes,1,opt,name=plugin" json:"plugin,omitempty"`
	SnapshotID string `protobuf:"bytes,2,opt,name=snapshotID" json:"snapshotID,omitempty"`
}

func (m *DeleteSnapshotRequest) Reset()                    { *m = DeleteSnapshotRequest{} }
func (m *DeleteSnapshotRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteSnapshotRequest) ProtoMessage()               {}
func (*DeleteSnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *DeleteSnapshotRequest) GetPlugin() string {
	if m != nil {
		return m.Plugin
	}
	return ""
}

func (m *DeleteSnapshotRequest) GetSnapshotID() string {
	if m != nil {
		return m.SnapshotID
	}
	return ""
}

type GetVolumeIDRequest struct {
	Plugin           string `protobuf:"bytes,1,opt,name=plugin" json:"plugin,omitempty"`
	PersistentVolume []byte `protobuf:"bytes,2,opt,name=persistentVolume,proto3" json:"persistentVolume,omitempty"`
}

func (m *GetVolumeIDRequest) Reset()                    { *m = GetVolumeIDRequest{} }
func (m *GetVolumeIDRequest) String() string            { return proto.CompactTextString(m) }
func (*GetVolumeIDRequest) ProtoMessage()               {}
func (*GetVolumeIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *GetVolumeIDRequest) GetPlugin() string {
	if m != nil {
		return m.Plugin
	}
	return ""
}

func (m *GetVolumeIDRequest) GetPersistentVolume() []byte {
	if m != nil {
		return m.PersistentVolume
	}
	return nil
}

type GetVolumeIDResponse struct {
	VolumeID string `protobuf:"bytes,1,opt,name=volumeID" json:"volumeID,omitempty"`
}

func (m *GetVolumeIDResponse) Reset()                    { *m = GetVolumeIDResponse{} }
func (m *GetVolumeIDResponse) String() string            { return proto.CompactTextString(m) }
func (*GetVolumeIDResponse) ProtoMessage()               {}
func (*GetVolumeIDResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *GetVolumeIDResponse) GetVolumeID() string {
	if m != nil {
		return m.VolumeID
	}
	return ""
}

type SetVolumeIDRequest struct {
	Plugin           string `protobuf:"bytes,1,opt,name=plugin" json:"plugin,omitempty"`
	PersistentVolume []byte `protobuf:"bytes,2,opt,name=persistentVolume,proto3" json:"persistentVolume,omitempty"`
	VolumeID         string `protobuf:"bytes,3,opt,name=volumeID" json:"volumeID,omitempty"`
}

func (m *SetVolumeIDRequest) Reset()                    { *m = SetVolumeIDRequest{} }
func (m *SetVolumeIDRequest) String() string            { return proto.CompactTextString(m) }
func (*SetVolumeIDRequest) ProtoMessage()               {}
func (*SetVolumeIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *SetVolumeIDRequest) GetPlugin() string {
	if m != nil {
		return m.Plugin
	}
	return ""
}

func (m *SetVolumeIDRequest) GetPersistentVolume() []byte {
	if m != nil {
		return m.PersistentVolume
	}
	return nil
}

func (m *SetVolumeIDRequest) GetVolumeID() string {
	if m != nil {
		return m.VolumeID
	}
	return ""
}

type SetVolumeIDResponse struct {
	PersistentVolume []byte `protobuf:"bytes,1,opt,name=persistentVolume,proto3" json:"persistentVolume,omitempty"`
}

func (m *SetVolumeIDResponse) Reset()                    { *m = SetVolumeIDResponse{} }
func (m *SetVolumeIDResponse) String() string            { return proto.CompactTextString(m) }
func (*SetVolumeIDResponse) ProtoMessage()               {}
func (*SetVolumeIDResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

func (m *SetVolumeIDResponse) GetPersistentVolume() []byte {
	if m != nil {
		return m.PersistentVolume
	}
	return nil
}

type VolumeSnapshotterInitRequest struct {
	Plugin string            `protobuf:"bytes,1,opt,name=plugin" json:"plugin,omitempty"`
	Config map[string]string `protobuf:"bytes,2,rep,name=config" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *VolumeSnapshotterInitRequest) Reset()                    { *m = VolumeSnapshotterInitRequest{} }
func (m *VolumeSnapshotterInitRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeSnapshotterInitRequest) ProtoMessage()               {}
func (*VolumeSnapshotterInitRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func (m *VolumeSnapshotterInitRequest) GetPlugin() string {
	if m != nil {
		return m.Plugin
	}
	return ""
}

func (m *VolumeSnapshotterInitRequest) GetConfig() map[string]string {
	if m != nil {
		return m.Config
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateVolumeRequest)(nil), "generated.CreateVolumeRequest")
	proto.RegisterType((*CreateVolumeResponse)(nil), "generated.CreateVolumeResponse")
	proto.RegisterType((*GetVolumeInfoRequest)(nil), "generated.GetVolumeInfoRequest")
	proto.RegisterType((*GetVolumeInfoResponse)(nil), "generated.GetVolumeInfoResponse")
	proto.RegisterType((*CreateSnapshotRequest)(nil), "generated.CreateSnapshotRequest")
	proto.RegisterType((*CreateSnapshotResponse)(nil), "generated.CreateSnapshotResponse")
	proto.RegisterType((*DeleteSnapshotRequest)(nil), "generated.DeleteSnapshotRequest")
	proto.RegisterType((*GetVolumeIDRequest)(nil), "generated.GetVolumeIDRequest")
	proto.RegisterType((*GetVolumeIDResponse)(nil), "generated.GetVolumeIDResponse")
	proto.RegisterType((*SetVolumeIDRequest)(nil), "generated.SetVolumeIDRequest")
	proto.RegisterType((*SetVolumeIDResponse)(nil), "generated.SetVolumeIDResponse")
	proto.RegisterType((*VolumeSnapshotterInitRequest)(nil), "generated.VolumeSnapshotterInitRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VolumeSnapshotter service

type VolumeSnapshotterClient interface {
	Init(ctx context.Context, in *VolumeSnapshotterInitRequest, opts ...grpc.CallOption) (*Empty, error)
	CreateVolumeFromSnapshot(ctx context.Context, in *CreateVolumeRequest, opts ...grpc.CallOption) (*CreateVolumeResponse, error)
	GetVolumeInfo(ctx context.Context, in *GetVolumeInfoRequest, opts ...grpc.CallOption) (*GetVolumeInfoResponse, error)
	CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error)
	DeleteSnapshot(ctx context.Context, in *DeleteSnapshotRequest, opts ...grpc.CallOption) (*Empty, error)
	GetVolumeID(ctx context.Context, in *GetVolumeIDRequest, opts ...grpc.CallOption) (*GetVolumeIDResponse, error)
	SetVolumeID(ctx context.Context, in *SetVolumeIDRequest, opts ...grpc.CallOption) (*SetVolumeIDResponse, error)
}

type volumeSnapshotterClient struct {
	cc *grpc.ClientConn
}

func NewVolumeSnapshotterClient(cc *grpc.ClientConn) VolumeSnapshotterClient {
	return &volumeSnapshotterClient{cc}
}

func (c *volumeSnapshotterClient) Init(ctx context.Context, in *VolumeSnapshotterInitRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/generated.VolumeSnapshotter/Init", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeSnapshotterClient) CreateVolumeFromSnapshot(ctx context.Context, in *CreateVolumeRequest, opts ...grpc.CallOption) (*CreateVolumeResponse, error) {
	out := new(CreateVolumeResponse)
	err := grpc.Invoke(ctx, "/generated.VolumeSnapshotter/CreateVolumeFromSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeSnapshotterClient) GetVolumeInfo(ctx context.Context, in *GetVolumeInfoRequest, opts ...grpc.CallOption) (*GetVolumeInfoResponse, error) {
	out := new(GetVolumeInfoResponse)
	err := grpc.Invoke(ctx, "/generated.VolumeSnapshotter/GetVolumeInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeSnapshotterClient) CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error) {
	out := new(CreateSnapshotResponse)
	err := grpc.Invoke(ctx, "/generated.VolumeSnapshotter/CreateSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeSnapshotterClient) DeleteSnapshot(ctx context.Context, in *DeleteSnapshotRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/generated.VolumeSnapshotter/DeleteSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeSnapshotterClient) GetVolumeID(ctx context.Context, in *GetVolumeIDRequest, opts ...grpc.CallOption) (*GetVolumeIDResponse, error) {
	out := new(GetVolumeIDResponse)
	err := grpc.Invoke(ctx, "/generated.VolumeSnapshotter/GetVolumeID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeSnapshotterClient) SetVolumeID(ctx context.Context, in *SetVolumeIDRequest, opts ...grpc.CallOption) (*SetVolumeIDResponse, error) {
	out := new(SetVolumeIDResponse)
	err := grpc.Invoke(ctx, "/generated.VolumeSnapshotter/SetVolumeID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VolumeSnapshotter service

type VolumeSnapshotterServer interface {
	Init(context.Context, *VolumeSnapshotterInitRequest) (*Empty, error)
	CreateVolumeFromSnapshot(context.Context, *CreateVolumeRequest) (*CreateVolumeResponse, error)
	GetVolumeInfo(context.Context, *GetVolumeInfoRequest) (*GetVolumeInfoResponse, error)
	CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error)
	DeleteSnapshot(context.Context, *DeleteSnapshotRequest) (*Empty, error)
	GetVolumeID(context.Context, *GetVolumeIDRequest) (*GetVolumeIDResponse, error)
	SetVolumeID(context.Context, *SetVolumeIDRequest) (*SetVolumeIDResponse, error)
}

func RegisterVolumeSnapshotterServer(s *grpc.Server, srv VolumeSnapshotterServer) {
	s.RegisterService(&_VolumeSnapshotter_serviceDesc, srv)
}

func _VolumeSnapshotter_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeSnapshotterInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeSnapshotterServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.VolumeSnapshotter/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeSnapshotterServer).Init(ctx, req.(*VolumeSnapshotterInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeSnapshotter_CreateVolumeFromSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeSnapshotterServer).CreateVolumeFromSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.VolumeSnapshotter/CreateVolumeFromSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeSnapshotterServer).CreateVolumeFromSnapshot(ctx, req.(*CreateVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeSnapshotter_GetVolumeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVolumeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeSnapshotterServer).GetVolumeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.VolumeSnapshotter/GetVolumeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeSnapshotterServer).GetVolumeInfo(ctx, req.(*GetVolumeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeSnapshotter_CreateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeSnapshotterServer).CreateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.VolumeSnapshotter/CreateSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeSnapshotterServer).CreateSnapshot(ctx, req.(*CreateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeSnapshotter_DeleteSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeSnapshotterServer).DeleteSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.VolumeSnapshotter/DeleteSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeSnapshotterServer).DeleteSnapshot(ctx, req.(*DeleteSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeSnapshotter_GetVolumeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVolumeIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeSnapshotterServer).GetVolumeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.VolumeSnapshotter/GetVolumeID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeSnapshotterServer).GetVolumeID(ctx, req.(*GetVolumeIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeSnapshotter_SetVolumeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVolumeIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeSnapshotterServer).SetVolumeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.VolumeSnapshotter/SetVolumeID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeSnapshotterServer).SetVolumeID(ctx, req.(*SetVolumeIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VolumeSnapshotter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "generated.VolumeSnapshotter",
	HandlerType: (*VolumeSnapshotterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _VolumeSnapshotter_Init_Handler,
		},
		{
			MethodName: "CreateVolumeFromSnapshot",
			Handler:    _VolumeSnapshotter_CreateVolumeFromSnapshot_Handler,
		},
		{
			MethodName: "GetVolumeInfo",
			Handler:    _VolumeSnapshotter_GetVolumeInfo_Handler,
		},
		{
			MethodName: "CreateSnapshot",
			Handler:    _VolumeSnapshotter_CreateSnapshot_Handler,
		},
		{
			MethodName: "DeleteSnapshot",
			Handler:    _VolumeSnapshotter_DeleteSnapshot_Handler,
		},
		{
			MethodName: "GetVolumeID",
			Handler:    _VolumeSnapshotter_GetVolumeID_Handler,
		},
		{
			MethodName: "SetVolumeID",
			Handler:    _VolumeSnapshotter_SetVolumeID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "VolumeSnapshotter.proto",
}

func init() { proto.RegisterFile("VolumeSnapshotter.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 566 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xd5, 0xda, 0x6e, 0x44, 0x26, 0xa5, 0x0a, 0x9b, 0xa4, 0x58, 0x16, 0x04, 0xe3, 0x0b, 0x51,
	0x0f, 0x96, 0x48, 0x0f, 0x14, 0x0e, 0x48, 0x51, 0x5d, 0x50, 0xd4, 0x4a, 0x48, 0x76, 0x41, 0x08,
	0x4e, 0x86, 0x6e, 0x5c, 0x8b, 0xc4, 0x36, 0xde, 0x4d, 0xa5, 0x7c, 0x0c, 0xbf, 0x82, 0xf8, 0x14,
	0x3e, 0x05, 0xc5, 0xde, 0x24, 0xbb, 0xb1, 0x1d, 0x87, 0x43, 0x6f, 0xde, 0x99, 0x9d, 0x37, 0x6f,
	0x66, 0xdf, 0x8c, 0xe1, 0xf1, 0xa7, 0x78, 0x3a, 0x9f, 0x11, 0x2f, 0xf2, 0x13, 0x7a, 0x1b, 0x33,
	0x46, 0x52, 0x3b, 0x49, 0x63, 0x16, 0xe3, 0x66, 0x40, 0x22, 0x92, 0xfa, 0x8c, 0xdc, 0x18, 0x87,
	0xde, 0xad, 0x9f, 0x92, 0x9b, 0xdc, 0x61, 0xfd, 0x42, 0xd0, 0x39, 0x4f, 0x89, 0xcf, 0x48, 0x1e,
	0xea, 0x92, 0x9f, 0x73, 0x42, 0x19, 0x3e, 0x86, 0x46, 0x32, 0x9d, 0x07, 0x61, 0xa4, 0x23, 0x13,
	0x0d, 0x9a, 0x2e, 0x3f, 0xe1, 0x3e, 0x00, 0xe5, 0xe8, 0x63, 0x47, 0x57, 0x32, 0x9f, 0x60, 0x59,
	0xfa, 0xef, 0x32, 0xa0, 0xeb, 0x45, 0x42, 0x74, 0x35, 0xf7, 0x6f, 0x2c, 0xd8, 0x80, 0x07, 0xf9,
	0x69, 0xf4, 0x45, 0xd7, 0x32, 0xef, 0xfa, 0x8c, 0x31, 0x68, 0x61, 0x9c, 0x50, 0xfd, 0xc0, 0x44,
	0x03, 0xd5, 0xcd, 0xbe, 0xad, 0x21, 0x74, 0x65, 0x7a, 0x34, 0x89, 0x23, 0x2a, 0xe0, 0x8c, 0x1d,
	0xce, 0x70, 0x7d, 0xb6, 0x26, 0xd0, 0x7d, 0x4f, 0x58, 0x1e, 0x30, 0x8e, 0x26, 0x71, 0x5d, 0x4d,
	0x22, 0x96, 0x22, 0x63, 0x49, 0x7c, 0x55, 0x99, 0xaf, 0x75, 0x09, 0xbd, 0xad, 0x3c, 0x9c, 0x9c,
	0xdc, 0x04, 0x54, 0x68, 0xc2, 0xaa, 0x50, 0x45, 0x28, 0xf4, 0x2f, 0x82, 0x5e, 0x5e, 0xe9, 0xea,
	0xf5, 0xee, 0x89, 0x36, 0x7e, 0x0b, 0x1a, 0xf3, 0x03, 0xaa, 0x6b, 0xa6, 0x3a, 0x68, 0x0d, 0x4f,
	0xec, 0xb5, 0x34, 0xec, 0xd2, 0xfc, 0xf6, 0xb5, 0x1f, 0xd0, 0x8b, 0x88, 0xa5, 0x0b, 0x37, 0x8b,
	0x33, 0x5e, 0x41, 0x73, 0x6d, 0xc2, 0x6d, 0x50, 0x7f, 0x90, 0x05, 0x67, 0xb6, 0xfc, 0xc4, 0x5d,
	0x38, 0xb8, 0xf3, 0xa7, 0x73, 0xc2, 0x39, 0xe5, 0x87, 0x37, 0xca, 0x19, 0xb2, 0xce, 0xe0, 0x78,
	0x3b, 0xc3, 0xa6, 0x61, 0x82, 0xaa, 0xd0, 0xb6, 0xaa, 0xac, 0x0f, 0xd0, 0x73, 0xc8, 0x94, 0xec,
	0xdf, 0x9b, 0x1a, 0x99, 0x5a, 0x9f, 0x01, 0x6f, 0x9e, 0xce, 0xa9, 0x43, 0x3b, 0x81, 0x76, 0x42,
	0x52, 0x1a, 0x52, 0x46, 0x22, 0x1e, 0x94, 0x61, 0x1e, 0xba, 0x05, 0xbb, 0xf5, 0x12, 0x3a, 0x12,
	0xf2, 0x1e, 0x7a, 0x65, 0x80, 0xbd, 0x7b, 0x21, 0x23, 0x65, 0x55, 0xb7, 0xb2, 0x8e, 0xa0, 0xe3,
	0x95, 0x10, 0x2d, 0x83, 0x47, 0x15, 0xb5, 0xfe, 0x46, 0xf0, 0xa4, 0xb0, 0x71, 0xc6, 0x51, 0x58,
	0xfb, 0x3c, 0x97, 0xd0, 0xf8, 0x1e, 0x47, 0x93, 0x30, 0xd0, 0x95, 0x4c, 0x84, 0xa7, 0x82, 0x08,
	0x77, 0x01, 0xda, 0xe7, 0x59, 0x54, 0xae, 0x46, 0x0e, 0x61, 0xbc, 0x86, 0x96, 0x60, 0xfe, 0x1f,
	0x45, 0x0e, 0xff, 0x68, 0xf0, 0xa8, 0x90, 0x0f, 0x8f, 0x40, 0x5b, 0xe6, 0xc4, 0x2f, 0xf6, 0x64,
	0x65, 0xb4, 0x85, 0x8b, 0x17, 0xb3, 0x84, 0x2d, 0xf0, 0x57, 0xd0, 0xc5, 0xb5, 0xf5, 0x2e, 0x8d,
	0x67, 0xab, 0x58, 0xdc, 0x2f, 0x4c, 0x9c, 0xb4, 0x7a, 0x8d, 0x67, 0x95, 0x7e, 0xfe, 0x44, 0x2e,
	0x3c, 0x94, 0xf6, 0x0e, 0x16, 0x23, 0xca, 0x36, 0x9f, 0x61, 0x56, 0x5f, 0xe0, 0x98, 0x1f, 0xe1,
	0x48, 0x9e, 0x4d, 0x6c, 0xd6, 0x2d, 0x06, 0xe3, 0xf9, 0x8e, 0x1b, 0x1c, 0xd6, 0x81, 0x23, 0x79,
	0x70, 0x25, 0xd8, 0xd2, 0x99, 0x2e, 0xe9, 0xe6, 0x15, 0xb4, 0x84, 0x99, 0xc2, 0x4f, 0x4b, 0xab,
	0x59, 0x0d, 0x8e, 0xd1, 0xaf, 0x72, 0x73, 0x4e, 0x57, 0xd0, 0xf2, 0x2a, 0xd0, 0xbc, 0xdd, 0x68,
	0x25, 0xf3, 0xf2, 0xad, 0x91, 0xfd, 0x47, 0x4f, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xc3, 0xf2,
	0xb8, 0x2f, 0x7b, 0x07, 0x00, 0x00,
}
